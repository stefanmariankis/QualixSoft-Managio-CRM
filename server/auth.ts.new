import { Express, Request, Response, NextFunction } from "express";
import session from "express-session";
import { storage } from "./storage";
import bcrypt from "bcryptjs";
import { v4 as uuidv4 } from "uuid";
import { loginSchema } from "../shared/schema";
import { db } from "./db";

// Adaugă proprietăți pentru session
declare module "express-session" {
  interface SessionData {
    userId: number;
  }
}

// Secretul pentru sesiuni
const SESSION_SECRET = process.env.SESSION_SECRET || uuidv4();

// Configurarea middleware pentru sesiuni
export function setupAuth(app: Express) {
  // Configurare sesiuni
  app.use(
    session({
      secret: SESSION_SECRET,
      resave: false,
      saveUninitialized: false,
      store: storage.sessionStore,
      cookie: {
        secure: process.env.NODE_ENV === "production", // în producție, folosește doar HTTPS
        maxAge: 1000 * 60 * 60 * 24 * 7, // 1 săptămână
        httpOnly: true,
      },
    })
  );

  // Middleware pentru rute protejate
  app.use("/api/me", requireAuth);
  app.use("/api/dashboard", requireAuth);
  app.use("/api/projects", requireAuth);
  app.use("/api/clients", requireAuth);
  app.use("/api/invoices", requireAuth);
  app.use("/api/templates", requireAuth);
  app.use("/api/user", requireAuth);
  app.use("/api/organization", requireAuth);
  app.use("/api/profile", requireAuth);

  // Handler pentru autentificare
  app.post("/api/login", async (req, res) => {
    try {
      // Validează datele de login
      const validationResult = loginSchema.safeParse(req.body);

      if (!validationResult.success) {
        return res.status(400).json({
          message: "Date invalide",
          errors: validationResult.error.format(),
        });
      }

      const { email, password } = validationResult.data;

      // Caută utilizatorul după email
      const user = await storage.getUserByUsername(email);

      if (!user) {
        return res.status(401).json({ message: "Email sau parolă incorecte" });
      }

      // Verifică parola
      const isPasswordValid = await bcrypt.compare(password, user.password);

      if (!isPasswordValid) {
        return res.status(401).json({ message: "Email sau parolă incorecte" });
      }

      // Setează sesiunea
      req.session.userId = user.id;
      await req.session.save();

      // Obține informațiile organizației
      let organization = null;
      if (user.organization_id) {
        const orgResults = await db`
          SELECT * FROM organizations
          WHERE id = ${user.organization_id}
          LIMIT 1
        `;

        if (orgResults.length > 0) {
          organization = orgResults[0];
        }
      }

      // Exclude parola din răspuns
      const { password: _, ...userWithoutPassword } = user;

      return res.status(200).json({
        user: userWithoutPassword,
        organization,
      });
    } catch (error: any) {
      console.error("Eroare la autentificare:", error);
      return res.status(500).json({
        message: "Eroare internă de server",
        error: error.message || "Eroare necunoscută",
      });
    }
  });

  // Handler pentru delogare
  app.post("/api/logout", (req, res) => {
    req.session.destroy((err) => {
      if (err) {
        console.error("Eroare la distrugerea sesiunii:", err);
        return res.status(500).json({
          message: "Eroare la deconectare",
          error: err.message,
        });
      }

      // Șterge cookie-ul de sesiune
      res.clearCookie("connect.sid");
      
      return res.status(200).json({ message: "Deconectat cu succes" });
    });
  });

  // Handler pentru verificarea sesiunii
  app.get("/api/me", async (req, res) => {
    try {
      const userId = req.session.userId;
      
      if (!userId) {
        return res.status(401).json({ message: "Neautorizat" });
      }

      const user = await storage.getUser(userId);

      if (!user) {
        // Utilizatorul a fost șters între timp
        req.session.destroy(() => {});
        return res.status(401).json({ message: "Utilizator negăsit" });
      }

      // Obține informațiile organizației
      let organization = null;
      if (user.organization_id) {
        const orgResults = await db`
          SELECT * FROM organizations
          WHERE id = ${user.organization_id}
          LIMIT 1
        `;

        if (orgResults.length > 0) {
          organization = orgResults[0];
        }
      }

      // Exclude parola din răspuns
      const { password: _, ...userWithoutPassword } = user;

      return res.json({
        user: userWithoutPassword,
        organization,
      });
    } catch (error: any) {
      console.error("Eroare la obținerea datelor utilizatorului:", error);
      return res.status(500).json({
        message: "Eroare internă de server",
        error: error.message || "Eroare necunoscută",
      });
    }
  });
}

// Middleware pentru a verifica autentificarea
export function requireAuth(req: Request, res: Response, next: NextFunction) {
  if (!req.session.userId) {
    return res.status(401).json({ message: "Neautorizat" });
  }
  next();
}